// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container_manager.proto

#ifndef PROTOBUF_INCLUDED_container_5fmanager_2eproto
#define PROTOBUF_INCLUDED_container_5fmanager_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_container_5fmanager_2eproto 

namespace protobuf_container_5fmanager_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_container_5fmanager_2eproto
namespace containermanager {
class ContainerParameters;
class ContainerParametersDefaultTypeInternal;
extern ContainerParametersDefaultTypeInternal _ContainerParameters_default_instance_;
class ContainerRequest;
class ContainerRequestDefaultTypeInternal;
extern ContainerRequestDefaultTypeInternal _ContainerRequest_default_instance_;
}  // namespace containermanager
namespace google {
namespace protobuf {
template<> ::containermanager::ContainerParameters* Arena::CreateMaybeMessage<::containermanager::ContainerParameters>(Arena*);
template<> ::containermanager::ContainerRequest* Arena::CreateMaybeMessage<::containermanager::ContainerRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace containermanager {

// ===================================================================

class ContainerParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:containermanager.ContainerParameters) */ {
 public:
  ContainerParameters();
  virtual ~ContainerParameters();

  ContainerParameters(const ContainerParameters& from);

  inline ContainerParameters& operator=(const ContainerParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContainerParameters(ContainerParameters&& from) noexcept
    : ContainerParameters() {
    *this = ::std::move(from);
  }

  inline ContainerParameters& operator=(ContainerParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerParameters* internal_default_instance() {
    return reinterpret_cast<const ContainerParameters*>(
               &_ContainerParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ContainerParameters* other);
  friend void swap(ContainerParameters& a, ContainerParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContainerParameters* New() const final {
    return CreateMaybeMessage<ContainerParameters>(NULL);
  }

  ContainerParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContainerParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContainerParameters& from);
  void MergeFrom(const ContainerParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string container_name = 1;
  void clear_container_name();
  static const int kContainerNameFieldNumber = 1;
  const ::std::string& container_name() const;
  void set_container_name(const ::std::string& value);
  #if LANG_CXX11
  void set_container_name(::std::string&& value);
  #endif
  void set_container_name(const char* value);
  void set_container_name(const char* value, size_t size);
  ::std::string* mutable_container_name();
  ::std::string* release_container_name();
  void set_allocated_container_name(::std::string* container_name);

  // string cpus = 2;
  void clear_cpus();
  static const int kCpusFieldNumber = 2;
  const ::std::string& cpus() const;
  void set_cpus(const ::std::string& value);
  #if LANG_CXX11
  void set_cpus(::std::string&& value);
  #endif
  void set_cpus(const char* value);
  void set_cpus(const char* value, size_t size);
  ::std::string* mutable_cpus();
  ::std::string* release_cpus();
  void set_allocated_cpus(::std::string* cpus);

  // string memory = 3;
  void clear_memory();
  static const int kMemoryFieldNumber = 3;
  const ::std::string& memory() const;
  void set_memory(const ::std::string& value);
  #if LANG_CXX11
  void set_memory(::std::string&& value);
  #endif
  void set_memory(const char* value);
  void set_memory(const char* value, size_t size);
  ::std::string* mutable_memory();
  ::std::string* release_memory();
  void set_allocated_memory(::std::string* memory);

  // string pids = 4;
  void clear_pids();
  static const int kPidsFieldNumber = 4;
  const ::std::string& pids() const;
  void set_pids(const ::std::string& value);
  #if LANG_CXX11
  void set_pids(::std::string&& value);
  #endif
  void set_pids(const char* value);
  void set_pids(const char* value, size_t size);
  ::std::string* mutable_pids();
  ::std::string* release_pids();
  void set_allocated_pids(::std::string* pids);

  // string restart_policy = 5;
  void clear_restart_policy();
  static const int kRestartPolicyFieldNumber = 5;
  const ::std::string& restart_policy() const;
  void set_restart_policy(const ::std::string& value);
  #if LANG_CXX11
  void set_restart_policy(::std::string&& value);
  #endif
  void set_restart_policy(const char* value);
  void set_restart_policy(const char* value, size_t size);
  ::std::string* mutable_restart_policy();
  ::std::string* release_restart_policy();
  void set_allocated_restart_policy(::std::string* restart_policy);

  // string image_name = 6;
  void clear_image_name();
  static const int kImageNameFieldNumber = 6;
  const ::std::string& image_name() const;
  void set_image_name(const ::std::string& value);
  #if LANG_CXX11
  void set_image_name(::std::string&& value);
  #endif
  void set_image_name(const char* value);
  void set_image_name(const char* value, size_t size);
  ::std::string* mutable_image_name();
  ::std::string* release_image_name();
  void set_allocated_image_name(::std::string* image_name);

  // @@protoc_insertion_point(class_scope:containermanager.ContainerParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr container_name_;
  ::google::protobuf::internal::ArenaStringPtr cpus_;
  ::google::protobuf::internal::ArenaStringPtr memory_;
  ::google::protobuf::internal::ArenaStringPtr pids_;
  ::google::protobuf::internal::ArenaStringPtr restart_policy_;
  ::google::protobuf::internal::ArenaStringPtr image_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_container_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContainerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:containermanager.ContainerRequest) */ {
 public:
  ContainerRequest();
  virtual ~ContainerRequest();

  ContainerRequest(const ContainerRequest& from);

  inline ContainerRequest& operator=(const ContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContainerRequest(ContainerRequest&& from) noexcept
    : ContainerRequest() {
    *this = ::std::move(from);
  }

  inline ContainerRequest& operator=(ContainerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerRequest* internal_default_instance() {
    return reinterpret_cast<const ContainerRequest*>(
               &_ContainerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ContainerRequest* other);
  friend void swap(ContainerRequest& a, ContainerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContainerRequest* New() const final {
    return CreateMaybeMessage<ContainerRequest>(NULL);
  }

  ContainerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContainerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContainerRequest& from);
  void MergeFrom(const ContainerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .containermanager.ContainerParameters parameters = 3;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 3;
  ::containermanager::ContainerParameters* mutable_parameters(int index);
  ::google::protobuf::RepeatedPtrField< ::containermanager::ContainerParameters >*
      mutable_parameters();
  const ::containermanager::ContainerParameters& parameters(int index) const;
  ::containermanager::ContainerParameters* add_parameters();
  const ::google::protobuf::RepeatedPtrField< ::containermanager::ContainerParameters >&
      parameters() const;

  // string runtime = 1;
  void clear_runtime();
  static const int kRuntimeFieldNumber = 1;
  const ::std::string& runtime() const;
  void set_runtime(const ::std::string& value);
  #if LANG_CXX11
  void set_runtime(::std::string&& value);
  #endif
  void set_runtime(const char* value);
  void set_runtime(const char* value, size_t size);
  ::std::string* mutable_runtime();
  ::std::string* release_runtime();
  void set_allocated_runtime(::std::string* runtime);

  // string operation = 2;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  const ::std::string& operation() const;
  void set_operation(const ::std::string& value);
  #if LANG_CXX11
  void set_operation(::std::string&& value);
  #endif
  void set_operation(const char* value);
  void set_operation(const char* value, size_t size);
  ::std::string* mutable_operation();
  ::std::string* release_operation();
  void set_allocated_operation(::std::string* operation);

  // @@protoc_insertion_point(class_scope:containermanager.ContainerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::containermanager::ContainerParameters > parameters_;
  ::google::protobuf::internal::ArenaStringPtr runtime_;
  ::google::protobuf::internal::ArenaStringPtr operation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_container_5fmanager_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContainerParameters

// string container_name = 1;
inline void ContainerParameters::clear_container_name() {
  container_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContainerParameters::container_name() const {
  // @@protoc_insertion_point(field_get:containermanager.ContainerParameters.container_name)
  return container_name_.GetNoArena();
}
inline void ContainerParameters::set_container_name(const ::std::string& value) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:containermanager.ContainerParameters.container_name)
}
#if LANG_CXX11
inline void ContainerParameters::set_container_name(::std::string&& value) {
  
  container_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:containermanager.ContainerParameters.container_name)
}
#endif
inline void ContainerParameters::set_container_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:containermanager.ContainerParameters.container_name)
}
inline void ContainerParameters::set_container_name(const char* value, size_t size) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:containermanager.ContainerParameters.container_name)
}
inline ::std::string* ContainerParameters::mutable_container_name() {
  
  // @@protoc_insertion_point(field_mutable:containermanager.ContainerParameters.container_name)
  return container_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerParameters::release_container_name() {
  // @@protoc_insertion_point(field_release:containermanager.ContainerParameters.container_name)
  
  return container_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerParameters::set_allocated_container_name(::std::string* container_name) {
  if (container_name != NULL) {
    
  } else {
    
  }
  container_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_name);
  // @@protoc_insertion_point(field_set_allocated:containermanager.ContainerParameters.container_name)
}

// string cpus = 2;
inline void ContainerParameters::clear_cpus() {
  cpus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContainerParameters::cpus() const {
  // @@protoc_insertion_point(field_get:containermanager.ContainerParameters.cpus)
  return cpus_.GetNoArena();
}
inline void ContainerParameters::set_cpus(const ::std::string& value) {
  
  cpus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:containermanager.ContainerParameters.cpus)
}
#if LANG_CXX11
inline void ContainerParameters::set_cpus(::std::string&& value) {
  
  cpus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:containermanager.ContainerParameters.cpus)
}
#endif
inline void ContainerParameters::set_cpus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:containermanager.ContainerParameters.cpus)
}
inline void ContainerParameters::set_cpus(const char* value, size_t size) {
  
  cpus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:containermanager.ContainerParameters.cpus)
}
inline ::std::string* ContainerParameters::mutable_cpus() {
  
  // @@protoc_insertion_point(field_mutable:containermanager.ContainerParameters.cpus)
  return cpus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerParameters::release_cpus() {
  // @@protoc_insertion_point(field_release:containermanager.ContainerParameters.cpus)
  
  return cpus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerParameters::set_allocated_cpus(::std::string* cpus) {
  if (cpus != NULL) {
    
  } else {
    
  }
  cpus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpus);
  // @@protoc_insertion_point(field_set_allocated:containermanager.ContainerParameters.cpus)
}

// string memory = 3;
inline void ContainerParameters::clear_memory() {
  memory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContainerParameters::memory() const {
  // @@protoc_insertion_point(field_get:containermanager.ContainerParameters.memory)
  return memory_.GetNoArena();
}
inline void ContainerParameters::set_memory(const ::std::string& value) {
  
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:containermanager.ContainerParameters.memory)
}
#if LANG_CXX11
inline void ContainerParameters::set_memory(::std::string&& value) {
  
  memory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:containermanager.ContainerParameters.memory)
}
#endif
inline void ContainerParameters::set_memory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:containermanager.ContainerParameters.memory)
}
inline void ContainerParameters::set_memory(const char* value, size_t size) {
  
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:containermanager.ContainerParameters.memory)
}
inline ::std::string* ContainerParameters::mutable_memory() {
  
  // @@protoc_insertion_point(field_mutable:containermanager.ContainerParameters.memory)
  return memory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerParameters::release_memory() {
  // @@protoc_insertion_point(field_release:containermanager.ContainerParameters.memory)
  
  return memory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerParameters::set_allocated_memory(::std::string* memory) {
  if (memory != NULL) {
    
  } else {
    
  }
  memory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memory);
  // @@protoc_insertion_point(field_set_allocated:containermanager.ContainerParameters.memory)
}

// string pids = 4;
inline void ContainerParameters::clear_pids() {
  pids_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContainerParameters::pids() const {
  // @@protoc_insertion_point(field_get:containermanager.ContainerParameters.pids)
  return pids_.GetNoArena();
}
inline void ContainerParameters::set_pids(const ::std::string& value) {
  
  pids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:containermanager.ContainerParameters.pids)
}
#if LANG_CXX11
inline void ContainerParameters::set_pids(::std::string&& value) {
  
  pids_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:containermanager.ContainerParameters.pids)
}
#endif
inline void ContainerParameters::set_pids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:containermanager.ContainerParameters.pids)
}
inline void ContainerParameters::set_pids(const char* value, size_t size) {
  
  pids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:containermanager.ContainerParameters.pids)
}
inline ::std::string* ContainerParameters::mutable_pids() {
  
  // @@protoc_insertion_point(field_mutable:containermanager.ContainerParameters.pids)
  return pids_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerParameters::release_pids() {
  // @@protoc_insertion_point(field_release:containermanager.ContainerParameters.pids)
  
  return pids_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerParameters::set_allocated_pids(::std::string* pids) {
  if (pids != NULL) {
    
  } else {
    
  }
  pids_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pids);
  // @@protoc_insertion_point(field_set_allocated:containermanager.ContainerParameters.pids)
}

// string restart_policy = 5;
inline void ContainerParameters::clear_restart_policy() {
  restart_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContainerParameters::restart_policy() const {
  // @@protoc_insertion_point(field_get:containermanager.ContainerParameters.restart_policy)
  return restart_policy_.GetNoArena();
}
inline void ContainerParameters::set_restart_policy(const ::std::string& value) {
  
  restart_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:containermanager.ContainerParameters.restart_policy)
}
#if LANG_CXX11
inline void ContainerParameters::set_restart_policy(::std::string&& value) {
  
  restart_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:containermanager.ContainerParameters.restart_policy)
}
#endif
inline void ContainerParameters::set_restart_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  restart_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:containermanager.ContainerParameters.restart_policy)
}
inline void ContainerParameters::set_restart_policy(const char* value, size_t size) {
  
  restart_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:containermanager.ContainerParameters.restart_policy)
}
inline ::std::string* ContainerParameters::mutable_restart_policy() {
  
  // @@protoc_insertion_point(field_mutable:containermanager.ContainerParameters.restart_policy)
  return restart_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerParameters::release_restart_policy() {
  // @@protoc_insertion_point(field_release:containermanager.ContainerParameters.restart_policy)
  
  return restart_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerParameters::set_allocated_restart_policy(::std::string* restart_policy) {
  if (restart_policy != NULL) {
    
  } else {
    
  }
  restart_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), restart_policy);
  // @@protoc_insertion_point(field_set_allocated:containermanager.ContainerParameters.restart_policy)
}

// string image_name = 6;
inline void ContainerParameters::clear_image_name() {
  image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContainerParameters::image_name() const {
  // @@protoc_insertion_point(field_get:containermanager.ContainerParameters.image_name)
  return image_name_.GetNoArena();
}
inline void ContainerParameters::set_image_name(const ::std::string& value) {
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:containermanager.ContainerParameters.image_name)
}
#if LANG_CXX11
inline void ContainerParameters::set_image_name(::std::string&& value) {
  
  image_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:containermanager.ContainerParameters.image_name)
}
#endif
inline void ContainerParameters::set_image_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:containermanager.ContainerParameters.image_name)
}
inline void ContainerParameters::set_image_name(const char* value, size_t size) {
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:containermanager.ContainerParameters.image_name)
}
inline ::std::string* ContainerParameters::mutable_image_name() {
  
  // @@protoc_insertion_point(field_mutable:containermanager.ContainerParameters.image_name)
  return image_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerParameters::release_image_name() {
  // @@protoc_insertion_point(field_release:containermanager.ContainerParameters.image_name)
  
  return image_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerParameters::set_allocated_image_name(::std::string* image_name) {
  if (image_name != NULL) {
    
  } else {
    
  }
  image_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_name);
  // @@protoc_insertion_point(field_set_allocated:containermanager.ContainerParameters.image_name)
}

// -------------------------------------------------------------------

// ContainerRequest

// string runtime = 1;
inline void ContainerRequest::clear_runtime() {
  runtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContainerRequest::runtime() const {
  // @@protoc_insertion_point(field_get:containermanager.ContainerRequest.runtime)
  return runtime_.GetNoArena();
}
inline void ContainerRequest::set_runtime(const ::std::string& value) {
  
  runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:containermanager.ContainerRequest.runtime)
}
#if LANG_CXX11
inline void ContainerRequest::set_runtime(::std::string&& value) {
  
  runtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:containermanager.ContainerRequest.runtime)
}
#endif
inline void ContainerRequest::set_runtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:containermanager.ContainerRequest.runtime)
}
inline void ContainerRequest::set_runtime(const char* value, size_t size) {
  
  runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:containermanager.ContainerRequest.runtime)
}
inline ::std::string* ContainerRequest::mutable_runtime() {
  
  // @@protoc_insertion_point(field_mutable:containermanager.ContainerRequest.runtime)
  return runtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerRequest::release_runtime() {
  // @@protoc_insertion_point(field_release:containermanager.ContainerRequest.runtime)
  
  return runtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerRequest::set_allocated_runtime(::std::string* runtime) {
  if (runtime != NULL) {
    
  } else {
    
  }
  runtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime);
  // @@protoc_insertion_point(field_set_allocated:containermanager.ContainerRequest.runtime)
}

// string operation = 2;
inline void ContainerRequest::clear_operation() {
  operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContainerRequest::operation() const {
  // @@protoc_insertion_point(field_get:containermanager.ContainerRequest.operation)
  return operation_.GetNoArena();
}
inline void ContainerRequest::set_operation(const ::std::string& value) {
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:containermanager.ContainerRequest.operation)
}
#if LANG_CXX11
inline void ContainerRequest::set_operation(::std::string&& value) {
  
  operation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:containermanager.ContainerRequest.operation)
}
#endif
inline void ContainerRequest::set_operation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:containermanager.ContainerRequest.operation)
}
inline void ContainerRequest::set_operation(const char* value, size_t size) {
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:containermanager.ContainerRequest.operation)
}
inline ::std::string* ContainerRequest::mutable_operation() {
  
  // @@protoc_insertion_point(field_mutable:containermanager.ContainerRequest.operation)
  return operation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerRequest::release_operation() {
  // @@protoc_insertion_point(field_release:containermanager.ContainerRequest.operation)
  
  return operation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerRequest::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation);
  // @@protoc_insertion_point(field_set_allocated:containermanager.ContainerRequest.operation)
}

// repeated .containermanager.ContainerParameters parameters = 3;
inline int ContainerRequest::parameters_size() const {
  return parameters_.size();
}
inline void ContainerRequest::clear_parameters() {
  parameters_.Clear();
}
inline ::containermanager::ContainerParameters* ContainerRequest::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:containermanager.ContainerRequest.parameters)
  return parameters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::containermanager::ContainerParameters >*
ContainerRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:containermanager.ContainerRequest.parameters)
  return &parameters_;
}
inline const ::containermanager::ContainerParameters& ContainerRequest::parameters(int index) const {
  // @@protoc_insertion_point(field_get:containermanager.ContainerRequest.parameters)
  return parameters_.Get(index);
}
inline ::containermanager::ContainerParameters* ContainerRequest::add_parameters() {
  // @@protoc_insertion_point(field_add:containermanager.ContainerRequest.parameters)
  return parameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::containermanager::ContainerParameters >&
ContainerRequest::parameters() const {
  // @@protoc_insertion_point(field_list:containermanager.ContainerRequest.parameters)
  return parameters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace containermanager

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_container_5fmanager_2eproto
